g + facet_grid(. ~ size)
g <- ggplot(means, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red')
+ geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') \
+ geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x = x) + geom_histogram(alpha = .20, binwidth=.3, colour = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, colour = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x, fill = size) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g <- ggplot(means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean")
g + facet_grid(. ~ size)
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean"))
g <- ggplot(means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean"))
#g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=sample_means) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean"))
g <- ggplot(data = means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title=" Sample Mean versus Theoretical Mean"))
g <- ggplot(data = means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
g <- ggplot(data = means, aes(x=x) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue'))
#g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
print g
print(g)
lambda = 0.2;
N=40;
nosim=1000;
#hist(rexp(1000, lambda))
sample_means = c()
for (i in 1 : nosim) sample_means = c(sample_means, mean(rexp(N, lambda)))
pop_mean = 1/lambda; pop_sd = 1/lambda;
means <- data.frame(x=sample_means, size=N)
sample_mean = mean(means$x)
sample_mean
g <- ggplot(means, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
print(g)
ggplot(means, aes(x=x) + geom_histogram((alpha = .20, binwidth=.3, colour = "black")) + geom_vline(xintercept=sample_mean, size = 1, color = 'blue')
sample_variance = var(means$x)
sample_variance
ggplot(means , aes(x=x)) + geom_density ()+ geom_vline(xintercept=sample_mean, size = 1, color = 'blue')
normalized_sample_means = (sample_means - pop_mean)/(pop_sd/sqrt(N));
#hist(normalized_sample_means);
dat <- data.frame(x= normalized_sample_means, size=N);
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
g <- ggplot(means, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
print(g)
library(ggplot2)
p1 <- ggplot(ToothGrowth, aes(factor(dose), len))
p1 + geom_boxplot(aes(fill=dose))+facet_grid(.~supp)+labs(title = "BoxPlot 1")
p2 +geom_boxplot(aes(fill= supp)) + facet_grid(.~dose)+labs(title = "BoxPlot 2")
p2 <- ggplot(ToothGrowth, aes(factor(supp), len))
p2 +geom_boxplot(aes(fill= supp)) + facet_grid(.~dose)+labs(title = "BoxPlot 2")
g1 <- ggplot(ToothGrowth, aes(x=supp, y = len)) + geom_boxplot(aes(fill=supp))
g1 <- ggplot(ToothGrowth, aes(x=supp, y = len)) + geom_boxplot(aes(fill=supp))
g1 <- ggplot(ToothGrowth, aes(x=supp, y = len)) + geom_boxplot(aes(fill=supp))
print(g1)
g2 <- ggplot(ToothGrowth, aes(x=dose, y = len)) + geom_boxplot(aes(fill=supp))
print(g2)
g2 <- ggplot(ToothGrowth, aes(x=dose, y = len)) + geom_boxplot(aes(fill=dose))
print(g2)
g2 <- ggplot(ToothGrowth, aes(x=factor(dose), y = len)) + geom_boxplot(aes(fill=factor(dose))
print(g2)
g2 <- ggplot(ToothGrowth, aes(x=factor(dose), y = len)) + geom_boxplot(aes(fill=factor(dose)))
print(g2)
g2 <- ggplot(ToothGrowth, aes(x=factor(dose), y = len)) + geom_boxplot(aes(fill=factor(dose))) + labs(title = "Plot 2")
print(g2)
p1 <- ggplot(ToothGrowth, aes(factor(dose), len))
p1 + geom_boxplot(aes(fill=dose))+facet_grid(.~supp)+labs(title = "Plot 3")
p2 <- ggplot(ToothGrowth, aes(factor(supp), len))
p2 +geom_boxplot(aes(fill= supp)) + facet_grid(.~dose)+labs(title = "Plot 4")
t.test(len~supp, data = ToothGrowth, paired = FALSE)
t.test(len~dose, data = a, paired = FALSE)
data(ToothGrowth)
a <- subset(ToothGrowth, dose %in%c(0.5, 1.0))
b <- subset(ToothGrowth, dose %in%c(0.5, 2.0))
c <- subset(ToothGrowth, dose %in%c(1.0, 2.0))
t.test(len~dose, data = a, paired = FALSE)
t.test(len~supp, data = ToothGrowth, paired = FALSE)
```{r}
t.test(len~dose, data = a, paired = FALSE)
t.test(len~dose, data = b, paired = FALSE)
t.test(len~dose, data = c, paired = FALSE)
tg1 <- subset(ToothGrowth, dose == 0.5)
tg2 <- subset(ToothGrowth, dose == 1.0)
tg3 <- subset(ToothGrowth, dose == 2.0 )
t.test(len~supp, data = ToothGrowth, paired = FALSE)
t.test(len~dose, data = a, paired = FALSE)
t.test(len~supp, data = tg1, paired = FALSE)
t.test(len~supp, data = tg2, paired = FALSE)
t.test(len~supp, data = tg3, paired = FALSE)
g1 <- ggplot(ToothGrowth, aes(x=supp, y = len)) + geom_boxplot(aes(fill=supp)) + labs(title = "Length vs Supplement")
print(g1)
g2 <- ggplot(ToothGrowth, aes(x=factor(dose), y = len)) + geom_boxplot(aes(fill=factor(dose))) + labs(title = "Length vs Dosage")
print(g2)
g3 <- ggplot(ToothGrowth, aes(factor(supp), len))
g3 +geom_boxplot(aes(fill= supp)) + facet_grid(.~dose)+labs(title = "Plot 4")
g3 <- ggplot(ToothGrowth, aes(factor(supp), len))
g3 +geom_boxplot(aes(fill= supp)) + facet_grid(.~dose)+labs(title = "Length vs Supplement by Dosage")
?t.test
library(ggplot2)
dev.new(width=5, height=5)
g1 <- ggplot(ToothGrowth, aes(x=supp, y = len)) + geom_boxplot(aes(fill=supp)) + labs(title = "Length vs Supplement")
print(g1)
```
```{r, fig.height=3, fig.width=3}
g1 <- ggplot(ToothGrowth, aes(x=supp, y = len)) + geom_boxplot(aes(fill=supp)) + labs(title = "Length vs Supplement")
print(g1)
```
Simulating random exponentials with lambda = 0.2
lambda = 0.2;
N=40;
nosim=1000;
sample_means = c()
for (i in 1 : nosim) sample_means = c(sample_means, mean(rexp(N, lambda)))
pop_mean = 1/lambda; pop_sd = 1/lambda;
means <- data.frame(x=sample_means, size=N)
sample_mean = mean(means$x)
sample_mean
g1 <- ggplot(means, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline(xintercept=sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
print(g1)
lambda = 0.2;
N=40;
nosim=1000;
set.seed = 18
sample_means = c()
for (i in 1 : nosim) sample_means = c(sample_means, mean(rexp(N, lambda)))
a <- data.frame(x=sample_means, size=N)
sample_mean = mean(a$x)
sample_mean
pop_mean = 1/lambda
pop_mean
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 2, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs (title = Distribution of Mean of 40 Exponentials"") + labs ( x= "Means, y = "Frequenc"y)
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title = Distribution of Mean of 40 Exponentials"") + labs( x= "Means, y = "Frequenc"y)
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue') + labs(title = "Distribution of Mean of 40 Exponentials") + labs( x= "Means, y = "Frequency")
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')+ labs(title = "Distribution of Means of 40 Exponentials")
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'blue')+ labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g1)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 2, color = 'red') + geom_vline(xintercept=pop_mean, size = 2, color = 'blue')+ labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g1)
pop_sd = 1/lambda
pop_var = (pop_sd)^2
pop_var
sample_variance = var(a$x)
sample_variance
?var
pop_var/N
sd_of_means = sd(a$x)
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 2, color = 'red') + geom_vline(xintercept=sample_mean - sd_of_means, size = 2, color = 'blue')+ labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g1)
```
z = pop_var/N
z
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=sample_mean - sd_of_means, size = 1, color = 'blue')+ geom_vline(xintercept=sample_mean + sd_of_means, size = 1, color = 'blue') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') +geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g1)
g2 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=sample_mean - sd_of_means, size = 1, color = 'blue')+ geom_vline(xintercept=sample_mean + sd_of_means, size = 1, color = 'blue') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') + labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g2)
g2 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=sample_mean - sd_of_means, size = 1, color = 'blue')+ geom_vline(xintercept=sample_mean + sd_of_means, size = 1, color = 'blue') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') + geom_vline(xintercept=pop_mean + z, size = 1, color = 'green') + labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g2)
g2 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline(xintercept=pop_mean, size = 1, color = 'black')+ geom_vline(xintercept=sample_mean + sd_of_means, size = 1, color = 'blue') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') + geom_vline(xintercept=pop_mean + z, size = 1, color = 'green') + labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g2)
g2 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline (xintercept = pop_mean, size = 1, color = 'black') + geom_vline(xintercept= sample_mean - sd-of_means, size = 1, color = 'blue')+ geom_vline(xintercept=sample_mean + sd_of_means, size = 1, color = 'blue') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') + geom_vline(xintercept=pop_mean + z, size = 1, color = 'green') + labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g2)
g2 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 1, color = 'red') + geom_vline (xintercept = pop_mean, size = 1, color = 'black') + geom_vline(xintercept= sample_mean - sd_of_means, size = 1, color = 'blue')+ geom_vline(xintercept=sample_mean + sd_of_means, size = 1, color = 'blue') + geom_vline(xintercept=pop_mean - z, size = 1, color = 'green') + geom_vline(xintercept=pop_mean + z, size = 1, color = 'green') + labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g2)
normalized_sample_means = (sample_means - pop_mean)/(pop_sd/sqrt(N));
dat <- data.frame(x= normalized_sample_means, size=N);
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
```{r}
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40)))
hist(mns)
hist(rexp(1000))
g1 <- ggplot(a, aes(x=x)) + geom_histogram(alpha = .20, binwidth=.3, color = "black") + geom_vline (xintercept = sample_mean, size = 2, color = 'red') + geom_vline(xintercept=pop_mean, size = 2, color = 'blue')+ labs(title = "Distribution of Means of 40 Exponentials") + labs(x="Means", y = "Frequency")
print(g1)
pop_mean = 1/lambda; pop_mean
a <- data.frame(x=sample_means, size=N)
sample_mean = mean(a$x);sample_mean
lambda = 0.2;
N=40;
nosim=1000;
set.seed = 18
sample_means = c()
for (i in 1 : nosim) sample_means = c(sample_means, mean(rexp(N, lambda)))
```{r}
pop_mean = 1/lambda; pop_mean
a <- data.frame(x=sample_means, size=N)
sample_mean = mean(a$x);sample_mean
set.seed = 18
lambda = 0.2;
N=40;
nosim=1000;
sample_means = c()
for (i in 1 : nosim) sample_means = c(sample_means, mean(rexp(N, lambda)))
```{r}
pop_mean = 1/lambda; pop_mean
a <- data.frame(x=sample_means, size=N)
sample_mean = mean(a$x);sample_mean
```
set.seed = 18
lambda = 0.2;
N=40;
nosim=1000;
sample_means = c()
for (i in 1 : nosim) sample_means = c(sample_means, mean(rexp(N, lambda)))
pop_mean = 1/lambda; pop_mean
a <- data.frame(x=sample_means, size=N)
sample_mean = mean(a$x);sample_mean
x <- (0.18, -1.54, 0.42, 0.95)
w <- (2, 1, 3, 1)
a <- x*w
mean(a)
a
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
a <- x*w
a
m <- mean(a)
m
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
a <- x*w
b <- sum(a)
d <- sum(w)
wtdmean  <- b/d
wtdmean
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(y ~ x)
lm(y ~ x-1)
data(mtcars)
head(mtcars)
lm(mpg ~ weight)
lm(mpg ~ weight)
lm(mpg~ weight)
lm(mpg~ weight, mtcars)
lm(mpg~ wt, mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xbar <- mean(x)
?sd
sdx <- sd(x)
x1 <- (x(1) - xbar)/sdx
x1 <- (8.58 - xbar)/sdx
x1
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y ~ x)
library(datasets)
mtcars
data(mtcars)
head(mtcars)
summary(mtcars)
?datasets
library(help = "datasets")
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
library(swirl)
swirl()
swirl()
par(mfrow=c(2, 2))
plot(fit2)
```{r eval=FALSE}
fit2 <- step(lm(mpg ~ ., data=mtcars))
```
```{r}
summary(fit2)$coeff
summary(fit2)$r.squared
```
```{r eval=FALSE}
fit2 <- step(lm(mpg ~ ., data=mtcars))
```
```{r}
summary(fit2)$coeff
summary(fit2)$r.squared
```
fit2 <- step(lm(mpg ~ ., data=mtcars))
summary(fit2)
fit2 <- step(lm(mpg ~ ., data=mtcars
)
)
summary(fit2)
fit1 <- lm(mpg ~ am, data = mtcars)
summary(fit1)$coef
head(mtcars)
?rsquare
?rsquared
?r-squared
fit2 <- lm(mpg ~ wt+ qsec + am, data = mtcars)
summary(fit2)$coef
summary(fit2)$r-squared
summary(fit2)$r.squared
install.packages("caret")
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
modelFit <- train(type~., data=training, method="glm")
install.packages("e1071")
modelFit <- train(type~., data=training, method="glm")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modRF <- train(y~., data=train, method="rf", prox=TRUE)
modRF <- train(y~., data=vowel.train, method="rf", prox=TRUE)
modRF
modGBM <- train(y~., data=vowel.train, method="gbm", prox=TRUE)
install.packages("gbm")
library(gbm)
modGBM <- train(y~., data=vowel.train, method="gbm", prox=TRUE)
modGBM <- train(y~., data=vowel.train, method="gbm")
modGBM
pred_RF <- predict(modRF, vowel.test)
pred_GBM <- predict(modGBM, vowel.test)
RFaccuracy <- sum(pred_RF == vowel.test$y) / length(pred_RF)
RFaccuracy
GBMaccuracy <- sum(pred_GBM == vowel.test$y) / length(pred_GBM)
GBMaccuracy
agree = vowel.test(pred_RF == pred_GBM)
agree = vowel.test[pred_RF == pred_GBM]
confRM <- confusionMatrix(pred_RF, vowel.test$y)
confRM
confGBM <- confusionMatrix(pred_GBM, vowel.test$y)
confGBM
predRF
pred_RF
agree = vowel.test[pred_RF == pred_GBM]
i = (pred_RF == pred_GBM)
new_test = vowel.test[i,]
agree.predRF <- predict(modRF, new_test$y)
agree.predRF <- predict(modRF, new_test)
agree.predGBM <- predict(modGBM, new_test)
agree.confRM <- confusionMatrix(agree.predRF, vowel.test$y)
agree.confRM <- confusionMatrix(agree.predRF, new_test$y)
agree.confRM
agree.confGBM <- confusionMatrix(agree.predGBM, new_test$y)
confGBM
agree.predGBM <- predict(modGBM, new_test)
agree.confGBM <- confusionMatrix(agree.predGBM, new_test$y)
confGBM
confGBM
agree.confGBM
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
head(training)
modRF <- train(daignosis ~ ., data = training, method="rf")
modRF <- train(diagnosis ~ ., data = training, method="rf")
modGBM <- train(diagnosis ~ ., data = training, method="gbm")
modLDA <- train(diagnosis ~ ., data = training, method="lda")
pred1 <- predict(modRF, testing)
pred2 <- precidt(modGBM, testing)
pred2 <- predict(modGBM, testing)
pred3 <- predict(modLDA, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis~., method="rf", data=predDF)
combPred <- predict(combModFit, predDF)
accuracy <- confusionMatrix(combPred, predDF$diagnosis)$overall[1]
accuracy
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(e1071)
?plot.enet
library(elasticnet)
install.packages("elasticnet")
library(elasticnet)
model <- train(CompressiveStrength ~ ., data=training, method="lasso")
?plot.enet
plot.enet(model$finalModel, xvar="penalty", use.color=T)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(325)
fit <- svm(CompressiveStrength ~., data=training)
pred <- predict(fit, testing)
acc <- accuracy(pred, testing$CompressiveStrength)
confusionMatrix(pred, training$CompressiveStrength)
cf <- confusionMatrix(pred, testing$CompressiveStrength)
install.packages("shiny")
setwd("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
library(shiny)
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
cycle = 28
n1 =cycle-18
lmp="11-01-2015"
f = lmp + n1
f1 = as.Date(lmp) + n1
f1
cycle = 28
n1 =cycle-18
lmp="2015-11-01"
f = lmp + n1
f1 = as.Date(lmp) + n1
f1
cycle = 28
n1 =cycle-18
lmp="2015-11-15"
f = lmp + n1
f1 = as.Date(lmp) + n1
f1
cycle = 28
n1 =cycle-18
n2 = cycle - 11
lmp="2015-11-15"
f = lmp + n1
l= lmp + n2
f1 = as.Date(lmp) + n1 +1
l1 = as.Date(lmp) + n2 +1
f1
l1
cycle = 28
n1 =cycle - 17
n2 = cycle - 12
lmp="2015-11-15"
f = lmp + n1
l= lmp + n2
f1 = as.Date(lmp) + n1
l1 = as.Date(lmp) + n2
f1
l1
cycle = 31
n1 =cycle - 17
n2 = cycle - 12
lmp="2015-03-07"
f = lmp + n1
l= lmp + n2
f1 = as.Date(lmp) + n1
l1 = as.Date(lmp) + n2
f1
l1
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
runApp("~/coursera/data_prod/Shiny")
shinyapps::setAccountInfo(name='ss90', token='04DD5390EE565BF79F071E1E402894C0', secret='XkLA5+gsv+0KuW+t0i5WqxdWnScEx7bjAbtQ1FSY')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='ss90', token='04DD5390EE565BF79F071E1E402894C0', secret='XkLA5+gsv+0KuW+t0i5WqxdWnScEx7bjAbtQ1FSY')
